# check_unportable.py - Unit tests for unportable SWIG-based libcueify APIs
#
# Copyright (c) 2011 Ian Jacobi <pipian@pipian.com>
# 
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# KLUDGE to allow tests to work.
import sys
sys.path.insert(0, '../../build/swig/python')

import cueify
import struct
import unittest

# Create a binary track descriptor from a TOC.
def TRACK_DESCRIPTOR(adr, ctrl, track, address):
    return [0, (((adr & 0xF) << 4) | (ctrl & 0xF)), track, 0,
            (address >> 24), ((address >> 16) & 0xFF),
            ((address >> 8) & 0xFF), (address & 0xFF)]

expected_toc = [((8 * 14 + 2) >> 8), ((8 * 14 + 2) & 0xFF), 1, 13]
expected_toc.extend(TRACK_DESCRIPTOR(cueify.SUB_Q_POSITION, 0, 1, 0))
expected_toc.extend(TRACK_DESCRIPTOR(cueify.SUB_Q_POSITION, 0, 2, 21445))
expected_toc.extend(TRACK_DESCRIPTOR(cueify.SUB_Q_POSITION, 0, 3, 34557))
expected_toc.extend(TRACK_DESCRIPTOR(cueify.SUB_Q_POSITION, 0, 4, 61903))
expected_toc.extend(TRACK_DESCRIPTOR(cueify.SUB_Q_POSITION, 0, 5, 83000))
expected_toc.extend(TRACK_DESCRIPTOR(cueify.SUB_Q_POSITION, 0, 6, 98620))
expected_toc.extend(TRACK_DESCRIPTOR(cueify.SUB_Q_POSITION, 0, 7, 112124))
expected_toc.extend(TRACK_DESCRIPTOR(cueify.SUB_Q_POSITION, 0, 8, 135655))
expected_toc.extend(TRACK_DESCRIPTOR(cueify.SUB_Q_POSITION, 0, 9, 154145))
expected_toc.extend(TRACK_DESCRIPTOR(cueify.SUB_Q_POSITION, 0, 10, 176766))
expected_toc.extend(TRACK_DESCRIPTOR(cueify.SUB_Q_POSITION, 0, 11, 194590))
expected_toc.extend(TRACK_DESCRIPTOR(cueify.SUB_Q_POSITION, 0, 12, 213436))
expected_toc.extend(TRACK_DESCRIPTOR(cueify.SUB_Q_POSITION,
                                     cueify.TOC_TRACK_IS_DATA, 13, 244076))
expected_toc.extend(TRACK_DESCRIPTOR(cueify.SUB_Q_POSITION,
                                     cueify.TOC_TRACK_IS_DATA, 0xAA, 258988))

expected_sessions = [(10 >> 8), (10 & 0xFF), 1, 2]
expected_sessions.extend(
    TRACK_DESCRIPTOR(cueify.SUB_Q_POSITION, cueify.TOC_TRACK_IS_DATA, 13,
		     244076))

# Create a binary track descriptor from a full TOC.
def FULL_TOC_TRACK_DESCRIPTOR(session, adr, ctrl, track,
                              abs_min, abs_sec, abs_frm, min, sec, frm):
    return [session, (((adr & 0xF) << 4) | (ctrl & 0xF)), 0, track,
            abs_min, abs_sec, abs_frm, 0, min, sec, frm]

expected_full_toc = [(((13 + 2 * 3) * 11 + 2) >> 8),
                     (((13 + 2 * 3) * 11 + 2) & 0xFF), 1, 2]
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(1, 1, 0, 0xA0, 0, 0, 0, 1,
			      cueify.SESSION_MODE_1, 0))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(1, 1, 0, 0xA1, 0, 0, 0, 12, 0, 0))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(1, 1, 0, 0xA2, 0, 0, 0, 51, 44, 26))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(1, 1, 0, 1, 0, 0, 0, 0, 2, 0))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(1, 1, 0, 2, 0, 0, 0, 4, 47, 70))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(1, 1, 0, 3, 0, 0, 0, 7, 42, 57))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(1, 1, 0, 4, 0, 0, 0, 13, 47, 28))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(1, 1, 0, 5, 0, 0, 0, 18, 28, 50))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(1, 1, 0, 6, 0, 0, 0, 21, 56, 70))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(1, 1, 0, 7, 0, 0, 0, 24, 56, 74))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(1, 1, 0, 8, 0, 0, 0, 30, 10, 55))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(1, 1, 0, 9, 0, 0, 0, 34, 17, 20))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(1, 1, 0, 10, 0, 0, 0, 39, 18, 66))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(1, 1, 0, 11, 0, 0, 0, 43, 16, 40))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(1, 1, 0, 12, 0, 0, 0, 47, 27, 61))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(2, 1, 4, 0xA0, 0, 0, 0, 13,
			      cueify.SESSION_MODE_2, 0))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(2, 1, 4, 0xA1, 0, 0, 0, 13, 0, 0))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(2, 1, 4, 0xA2, 0, 0, 0, 57, 35, 13))
expected_full_toc.extend(
    FULL_TOC_TRACK_DESCRIPTOR(2, 1, 4, 13, 0, 0, 0, 54, 16, 26))

expected_cdtext = [
    0x03,0xaa,0x00,0x00,
    0x80,0x00,0x00,0x00,
      0x48,0x65,0x61,0x74,0x68,0x65,0x6e,0x00,0x53,0x75,0x6e,0x64,
      0x1a,0xdd,
    0x80,0x01,0x01,0x04,
      0x61,0x79,0x00,0x43,0x61,0x63,0x74,0x75,0x73,0x00,0x53,0x6c,
      0xd7,0x93,
    0x80,0x03,0x02,0x02,
      0x69,0x70,0x20,0x41,0x77,0x61,0x79,0x00,0x53,0x6c,0x6f,0x77,
      0x91,0x6f,
    0x80,0x04,0x03,0x04,
      0x20,0x42,0x75,0x72,0x6e,0x00,0x41,0x66,0x72,0x61,0x69,0x64,
      0x68,0x2f,
    0x80,0x05,0x04,0x06,
      0x00,0x49,0x27,0x76,0x65,0x20,0x42,0x65,0x65,0x6e,0x20,0x57,
      0x63,0x9a,
    0x80,0x06,0x05,0x0b,
      0x61,0x69,0x74,0x69,0x6e,0x67,0x20,0x46,0x6f,0x72,0x20,0x59,
      0xa9,0x12,
    0x80,0x06,0x06,0x0f,
      0x6f,0x75,0x00,0x49,0x20,0x57,0x6f,0x75,0x6c,0x64,0x20,0x42,
      0xf7,0x10,
    0x80,0x07,0x07,0x09,
      0x65,0x20,0x59,0x6f,0x75,0x72,0x20,0x53,0x6c,0x61,0x76,0x65,
      0xf3,0x71,
    0x80,0x07,0x08,0x0f,
      0x00,0x49,0x20,0x54,0x6f,0x6f,0x6b,0x20,0x41,0x20,0x54,0x72,
      0xc9,0x30,
    0x80,0x08,0x09,0x0b,
      0x69,0x70,0x20,0x4f,0x6e,0x20,0x41,0x20,0x47,0x65,0x6d,0x69,
      0xff,0x99,
    0x80,0x08,0x0a,0x0f,
      0x6e,0x69,0x20,0x53,0x70,0x61,0x63,0x65,0x73,0x68,0x69,0x70,
      0x17,0x02,
    0x80,0x08,0x0b,0x0f,
      0x00,0x35,0x3a,0x31,0x35,0x20,0x54,0x68,0x65,0x20,0x41,0x6e,
      0xfa,0xf7,
    0x80,0x09,0x0c,0x0b,
      0x67,0x65,0x6c,0x73,0x20,0x48,0x61,0x76,0x65,0x20,0x47,0x6f,
      0xcf,0x2b,
    0x80,0x09,0x0d,0x0f,
      0x6e,0x65,0x00,0x45,0x76,0x65,0x72,0x79,0x6f,0x6e,0x65,0x20,
      0x62,0xbf,
    0x80,0x0a,0x0e,0x09,
      0x53,0x61,0x79,0x73,0x20,0x27,0x48,0x69,0x27,0x00,0x41,0x20,
      0x30,0x8a,
    0x80,0x0b,0x0f,0x02,
      0x42,0x65,0x74,0x74,0x65,0x72,0x20,0x46,0x75,0x74,0x75,0x72,
      0x40,0x2e,
    0x80,0x0b,0x10,0x0e,
      0x65,0x00,0x48,0x65,0x61,0x74,0x68,0x65,0x6e,0x20,0x28,0x54,
      0x74,0xbc,
    0x80,0x0c,0x11,0x0a,
      0x68,0x65,0x20,0x52,0x61,0x79,0x73,0x29,0x00,0x00,0x00,0x00,
      0x05,0xa5,
    0x81,0x00,0x12,0x00,
      0x44,0x61,0x76,0x69,0x64,0x20,0x42,0x6f,0x77,0x69,0x65,0x00,
      0x8c,0x01,
    0x81,0x01,0x13,0x00,
      0x44,0x61,0x76,0x69,0x64,0x20,0x42,0x6f,0x77,0x69,0x65,0x00,
      0x59,0x9c,
    0x81,0x02,0x14,0x00,
      0x44,0x61,0x76,0x69,0x64,0x20,0x42,0x6f,0x77,0x69,0x65,0x00,
      0xca,0xbf,
    0x81,0x03,0x15,0x00,
      0x44,0x61,0x76,0x69,0x64,0x20,0x42,0x6f,0x77,0x69,0x65,0x00,
      0x1f,0x22,
    0x81,0x04,0x16,0x00,
      0x44,0x61,0x76,0x69,0x64,0x20,0x42,0x6f,0x77,0x69,0x65,0x00,
      0xea,0x16,
    0x81,0x05,0x17,0x00,
      0x44,0x61,0x76,0x69,0x64,0x20,0x42,0x6f,0x77,0x69,0x65,0x00,
      0x3f,0x8b,
    0x81,0x06,0x18,0x00,
      0x44,0x61,0x76,0x69,0x64,0x20,0x42,0x6f,0x77,0x69,0x65,0x00,
      0x47,0xc3,
    0x81,0x07,0x19,0x00,
      0x44,0x61,0x76,0x69,0x64,0x20,0x42,0x6f,0x77,0x69,0x65,0x00,
      0x92,0x5e,
    0x81,0x08,0x1a,0x00,
      0x44,0x61,0x76,0x69,0x64,0x20,0x42,0x6f,0x77,0x69,0x65,0x00,
      0x40,0x2f,
    0x81,0x09,0x1b,0x00,
      0x44,0x61,0x76,0x69,0x64,0x20,0x42,0x6f,0x77,0x69,0x65,0x00,
      0x95,0xb2,
    0x81,0x0a,0x1c,0x00,
      0x44,0x61,0x76,0x69,0x64,0x20,0x42,0x6f,0x77,0x69,0x65,0x00,
      0x06,0x91,
    0x81,0x0b,0x1d,0x00,
      0x44,0x61,0x76,0x69,0x64,0x20,0x42,0x6f,0x77,0x69,0x65,0x00,
      0xd3,0x0c,
    0x81,0x0c,0x1e,0x00,
      0x44,0x61,0x76,0x69,0x64,0x20,0x42,0x6f,0x77,0x69,0x65,0x00,
      0x26,0x38,
    0x86,0x00,0x1f,0x00,
      0x43,0x4b,0x38,0x36,0x36,0x33,0x30,0x00,0x00,0x00,0x00,0x00,
      0x0d,0x1f,
    0x8e,0x00,0x20,0x00,
      0x00,0x55,0x53,0x2d,0x52,0x46,0x33,0x2d,0x30,0x32,0x2d,0x30,
      0xbc,0x79,
    0x8e,0x01,0x21,0x0b,
      0x30,0x30,0x30,0x31,0x00,0x55,0x53,0x2d,0x52,0x46,0x33,0x2d,
      0x28,0xcd,
    0x8e,0x02,0x22,0x07,
      0x30,0x32,0x2d,0x30,0x30,0x30,0x30,0x32,0x00,0x55,0x53,0x2d,
      0xea,0xf1,
    0x8e,0x03,0x23,0x03,
      0x52,0x46,0x33,0x2d,0x30,0x32,0x2d,0x30,0x30,0x30,0x30,0x33,
      0x44,0xe2,
    0x8e,0x03,0x24,0x0f,
      0x00,0x55,0x53,0x2d,0x52,0x46,0x33,0x2d,0x30,0x32,0x2d,0x30,
      0x63,0xab,
    0x8e,0x04,0x25,0x0b,
      0x30,0x30,0x30,0x34,0x00,0x55,0x53,0x2d,0x52,0x46,0x33,0x2d,
      0x97,0xea,
    0x8e,0x05,0x26,0x07,
      0x30,0x32,0x2d,0x30,0x30,0x30,0x30,0x35,0x00,0x55,0x53,0x2d,
      0x08,0x17,
    0x8e,0x06,0x27,0x03,
      0x52,0x46,0x33,0x2d,0x30,0x32,0x2d,0x30,0x30,0x30,0x30,0x36,
      0xdc,0xac,
    0x8e,0x06,0x28,0x0f,
      0x00,0x55,0x53,0x2d,0x52,0x46,0x33,0x2d,0x30,0x32,0x2d,0x30,
      0x40,0x2b,
    0x8e,0x07,0x29,0x0b,
      0x30,0x30,0x30,0x37,0x00,0x55,0x53,0x2d,0x52,0x46,0x33,0x2d,
      0x4f,0x45,
    0x8e,0x08,0x2a,0x07,
      0x30,0x32,0x2d,0x30,0x30,0x30,0x30,0x38,0x00,0x55,0x53,0x2d,
      0x2d,0xa8,
    0x8e,0x09,0x2b,0x03,
      0x52,0x46,0x33,0x2d,0x30,0x32,0x2d,0x30,0x30,0x30,0x30,0x39,
      0x64,0x5f,
    0x8e,0x09,0x2c,0x0f,
      0x00,0x55,0x53,0x2d,0x52,0x46,0x33,0x2d,0x30,0x32,0x2d,0x30,
      0xe2,0x5c,
    0x8e,0x0a,0x2d,0x0b,
      0x30,0x30,0x31,0x30,0x00,0x55,0x53,0x2d,0x52,0x46,0x33,0x2d,
      0x7e,0x05,
    0x8e,0x0b,0x2e,0x07,
      0x30,0x32,0x2d,0x30,0x30,0x30,0x31,0x31,0x00,0x55,0x53,0x2d,
      0xde,0xf4,
    0x8e,0x0c,0x2f,0x03,
      0x52,0x46,0x33,0x2d,0x30,0x32,0x2d,0x30,0x30,0x30,0x31,0x32,
      0x2e,0xee,
    0x8e,0x0c,0x30,0x0f,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x2d,
    0x8f,0x00,0x31,0x00,
      0x01,0x01,0x0c,0x03,0x12,0x0d,0x00,0x00,0x00,0x00,0x01,0x00,
      0xd4,0xe2,
    0x8f,0x01,0x32,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x03,0x33,0x00,0x00,0x00,
      0x8b,0x51,
    0x8f,0x02,0x33,0x00,
      0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x4c,0xdf]

class TestUnportableFunctions(unittest.TestCase):
    def setUp(self):
        self.dev = cueify.Device()
        self.assertTrue(self.dev is not None)
    
    def test_toc(self):
        t = self.dev.readTOC()
        self.assertTrue(t is not None)
        self.assertEqual(
            t.serialize(),
            struct.pack(
                "B" * len(expected_toc),
                *expected_toc))

    def test_sessions(self):
        s = self.dev.readSessions()
        self.assertTrue(s is not None)
        self.assertEqual(
            s.serialize(),
            struct.pack(
                "B" * len(expected_sessions),
                *expected_sessions))

    def test_full_toc(self):
        t = self.dev.readFullTOC()
        self.assertTrue(t is not None)
        self.assertEqual(
            t.serialize(),
            struct.pack(
                "B" * len(expected_full_toc),
                *expected_full_toc))

    def test_cdtext(self):
        t = self.dev.readCDText()
        self.assertTrue(t is not None)
        self.assertEqual(
            t.serialize(),
            struct.pack(
                "B" * len(expected_cdtext),
                *expected_cdtext))

    def test_mcn_isrc(self):
        isrcs = [
            "USRF30200001", "USRF30200002", "USRF30200003", "USRF30200004",
            "USRF30200005", "USRF30200006", "USRF30200007", "USRF30200008",
            "USRF30200009", "USRF30200010", "USRF30200011", "USRF30200012"]
        self.assertEqual(self.dev.readMCN(), '')
        for i in range(12):
            self.assertEqual(self.dev.readISRC(i + 1), isrcs[i])

    def test_data_mode(self):
        data_modes = [
            cueify.DATA_MODE_CDDA, cueify.DATA_MODE_CDDA,
            cueify.DATA_MODE_CDDA, cueify.DATA_MODE_CDDA,
            cueify.DATA_MODE_CDDA, cueify.DATA_MODE_CDDA,
            cueify.DATA_MODE_CDDA, cueify.DATA_MODE_CDDA,
            cueify.DATA_MODE_CDDA, cueify.DATA_MODE_CDDA,
            cueify.DATA_MODE_CDDA, cueify.DATA_MODE_CDDA,
            cueify.DATA_MODE_MODE_2]
        for i in range(13):
            self.assertEqual(self.dev.readDataMode(i + 1), data_modes[i])

    def test_discid(self):
        # useDataTracks = False
        self.assertEqual(self.dev.freedbID(), 0xae0c1e0c)
        self.assertEqual(self.dev.freedbID(False), 0xae0c1e0c)
        self.assertEqual(self.dev.freedbID(True), 0xbe0d7d0d)
        self.assertEqual(self.dev.musicbrainzID(),
                         "iIqthNFjPeboX2O1GKpqvcQIWDc-")

if __name__ == '__main__':
    print ("NOTE: These tests are expected to fail except when (certain\n" +
	   "      printings of) David Bowie's Heathen is present in the\n" +
	   "      current computer's CD drive.\n")
    unittest.main()
